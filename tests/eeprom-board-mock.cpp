/*!
 * \file      eeprom-board.c
 *
 * \brief     Target board EEPROM driver implementation
 *
 * \copyright Revised BSD License, see section \ref LICENSE.
 *
 * \code
 *                ______                              _
 *               / _____)             _              | |
 *              ( (____  _____ ____ _| |_ _____  ____| |__
 *               \____ \| ___ |    (_   _) ___ |/ ___)  _ \
 *               _____) ) ____| | | || |_| ____( (___| | | |
 *              (______/|_____)_|_|_| \__)_____)\____)_| |_|
 *              (C)2013-2017 Semtech
 *
 * \endcode
 *
 * \author    Miguel Luis ( Semtech )
 *
 * \author    Gregory Cristian ( Semtech )
 * 
 * Modified by Medad Newman for unittesting
 */

#include "CppUTestExt/MockSupport.h"

extern "C"
{
#include "utilities.h"
#include "eeprom-board.h"
#include <string.h>
#include "bsp.h"
}
#include "nvm_images.hpp"


uint8_t simulated_flash[EEPROM_SIZE] = { 
0x00,0x01,0x00,0x01,0xa0,0xd2,0x00,0x00,0x69,0x01,0x00,0x00,0x09,0x00,0x00,0x00,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x00,0x00,0x00,0x00,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xde,0xf4,0xa5,0x91,0x00,0x00,0x00,0x00,0xc5,0x60,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x05,0x00,0x00,0xeb,0x3b,0xf5,0xde,0x05,0x00,0x00,0x00,0x14,0x00,0x00,0x00,0x06,0x00,0x00,0x00,0xb8,0x0b,0x00,0x00,0x88,0x13,0x00,0x00,0x70,0x17,0x00,0x00,0x88,0x13,0x00,0x00,0x70,0x17,0x00,0x00,0x01,0x00,0x00,0x00,0x08,0xe6,0xd3,0x33,0x03,0x00,0x00,0x00,0x08,0xe6,0xd3,0x33,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x41,0x9a,0x99,0x09,0x40,0x14,0x00,0x00,0x00,0x06,0x00,0x00,0x00,0xb8,0x0b,0x00,0x00,0xe8,0x03,0x00,0x00,0xd0,0x07,0x00,0x00,0x88,0x13,0x00,0x00,0x70,0x17,0x00,0x00,0x01,0x00,0x00,0x00,0x08,0xe6,0xd3,0x33,0x00,0x00,0x00,0x00,0x08,0xe6,0xd3,0x33,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x41,0x9a,0x99,0x09,0x40,0x00,0x00,0x00,0x00,0x13,0x00,0x00,0x00,0xb5,0x6a,0x0b,0x26,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x17,0x00,0x20,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x04,0x17,0x00,0x20,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x08,0x17,0x00,0x20,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0c,0x17,0x00,0x20,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x01,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x34,0x03,0x00,0x20,0x00,0x03,0x00,0x01,0x02,0x00,0x00,0x00,0xc9,0x7e,0x66,0x45,0x00,0xed,0xdf,0x3b,0x7a,0xda,0x7f,0x6b,0x70,0xb3,0xd5,0x7e,0xd0,0x02,0x82,0x4d,0x00,0x00,0x00,0x00,0x00,0x4c,0x53,0x6a,0x96,0x13,0xe9,0x1f,0xec,0x72,0x7f,0xff,0x51,0x4a,0x66,0xe0,0x01,0x01,0x4c,0x53,0x6a,0x96,0x13,0xe9,0x1f,0xec,0x72,0x7f,0xff,0x51,0x4a,0x66,0xe0,0x01,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x04,0x5a,0x29,0xaa,0x5f,0xe1,0x00,0xef,0x91,0xc8,0xb2,0xb2,0x7d,0x62,0xe7,0x53,0xc0,0x05,0x5a,0x29,0xaa,0x5f,0xe1,0x00,0xef,0x91,0xc8,0xb2,0xb2,0x7d,0x62,0xe7,0x53,0xc0,0x06,0x5a,0x29,0xaa,0x5f,0xe1,0x00,0xef,0x91,0xc8,0xb2,0xb2,0x7d,0x62,0xe7,0x53,0xc0,0x07,0xd8,0x52,0xe6,0xa1,0x6d,0x28,0xd0,0xae,0xfd,0x85,0xc7,0xe2,0xee,0x11,0x9d,0xb0,0x08,0xed,0x07,0xd1,0xe4,0x7a,0x83,0xee,0xe1,0xe3,0x94,0x49,0x86,0x4d,0xcd,0x8a,0x02,0x7f,0x27,0x1e,0x70,0xab,0x3e,0x9c,0xa1,0xdd,0x16,0xc5,0x2d,0x0d,0xa5,0x60,0xf1,0x59,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x81,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x82,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x83,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x84,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x85,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x86,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x87,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x88,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x89,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x8a,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x8b,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x8c,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x74,0xd1,0xc9,0x82,0x64,0x00,0x00,0x00,0xdf,0x5f,0x01,0x00,0x62,0x00,0x00,0x00,0x60,0xe7,0x1a,0x00,0x40,0x77,0x1b,0x00,0x01,0x00,0x00,0x00,0x64,0x00,0x00,0x00,0xdf,0x5f,0x01,0x00,0x62,0x00,0x00,0x00,0xcb,0x30,0x1b,0x00,0x40,0x77,0x1b,0x00,0x01,0x00,0x00,0x00,0xe8,0x03,0x00,0x00,0xdf,0x5f,0x01,0x00,0x62,0x00,0x00,0x00,0x40,0x77,0x1b,0x00,0x40,0x77,0x1b,0x00,0x01,0x00,0x00,0x00,0x0a,0x00,0x00,0x00,0xdf,0x5f,0x01,0x00,0x62,0x00,0x00,0x00,0x40,0x77,0x1b,0x00,0x40,0x77,0x1b,0x00,0x01,0x00,0x00,0x00,0x64,0x00,0x00,0x00,0xdf,0x5f,0x01,0x00,0x62,0x00,0x00,0x00,0x40,0x77,0x1b,0x00,0x40,0x77,0x1b,0x00,0x01,0x00,0x00,0x00,0xe8,0x03,0x00,0x00,0xdf,0x5f,0x01,0x00,0x62,0x00,0x00,0x00,0x40,0x77,0x1b,0x00,0x40,0x77,0x1b,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x4a,0x6b,0x35,0xe3,0xa0,0x27,0xbe,0x33,0x00,0x00,0x00,0x00,0x50,0x01,0x00,0x00,0xe0,0x34,0xc1,0x33,0x00,0x00,0x00,0x00,0x50,0x01,0x00,0x00,0x20,0x42,0xc4,0x33,0x00,0x00,0x00,0x00,0x50,0x01,0x00,0x00,0x60,0xe5,0xae,0x33,0x00,0x00,0x00,0x00,0x50,0x00,0xff,0xff,0xa0,0xf2,0xb1,0x33,0x00,0x00,0x00,0x00,0x50,0x00,0xff,0xff,0xe0,0xff,0xb4,0x33,0x00,0x00,0x00,0x00,0x50,0x00,0xff,0xff,0x20,0x0d,0xb8,0x33,0x00,0x00,0x00,0x00,0x50,0x00,0xff,0xff,0x60,0x1a,0xbb,0x33,0x00,0x00,0x00,0x00,0x50,0x00,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x07,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x04,0x75,0xb3,0x4f,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x7d,0x49,0x4b,0x78
};



LmnStatus_t EepromMcuWriteBuffer( uint16_t addr, uint8_t *buffer, uint16_t size )
{
    memcpy(&simulated_flash[(int)addr], buffer, size);

    return LMN_STATUS_OK;
}

LmnStatus_t EepromMcuReadBuffer( uint16_t addr, uint8_t *buffer, uint16_t size )
{
    memcpy(buffer, &simulated_flash[(int)addr], size);

    return LMN_STATUS_OK;
}

void EepromMcuSetDeviceAddr( uint8_t addr )
{
}

LmnStatus_t EepromMcuGetDeviceAddr( void )
{
    return LMN_STATUS_OK;
}


void fake_eeprom_set(void)
{
    memcpy(simulated_flash, proper_compressed_nvm_eeprom_image, EEPROM_SIZE);
}

uint32_t deserialize_uint32(unsigned char *buffer, uint32_t loc);
bool HAL_FLASHEx_DATAEEPROM_Program(uint32_t TypeProgram, uint32_t Address, uint32_t Data);
/** @defgroup FLASHEx_Type_Program_Data FLASHEx Type Program Data
  * @{
  */
#define FLASH_TYPEPROGRAMDATA_BYTE ((uint32_t)0x00U)     /*!<Program byte (8-bit) at a specified address.*/
#define FLASH_TYPEPROGRAMDATA_HALFWORD ((uint32_t)0x01U) /*!<Program a half-word (16-bit) at a specified address.*/
#define FLASH_TYPEPROGRAMDATA_WORD ((uint32_t)0x02U)     /*!<Program a word (32-bit) at a specified address.*/
#define DATA_EEPROM_BASE ((uint32_t)0x08080000U)

uint32_t deserialize_uint32(unsigned char *buffer, uint32_t loc)
{
    uint32_t value = 0;

    value |= buffer[loc + 3] << 24;
    value |= buffer[loc + 2] << 16;
    value |= buffer[loc + 1] << 8;
    value |= buffer[loc + 0];
    return value;
}

/**
 * @brief Write words(4 bytes) at a time
 * 
 * @param addr 
 * @param buffer 
 * @param size 
 * @return LmnStatus_t 
 */
LmnStatus_t EepromMcuWriteBufferWord(uint16_t addr, uint8_t *buffer, uint16_t size)
{
    LmnStatus_t status = LMN_STATUS_ERROR;

    for (uint16_t i = 0; i < size; i += 4)
    {
        uint32_t write = deserialize_uint32(buffer, i);
        if (HAL_FLASHEx_DATAEEPROM_Program(FLASH_TYPEPROGRAMDATA_WORD, (addr + i), write) != true)
        {
            // Failed to write EEPROM
            break;
        }
    }
    status = LMN_STATUS_OK;

    return status;
}



bool HAL_FLASHEx_DATAEEPROM_Program(uint32_t TypeProgram, uint32_t Address, uint32_t Data)
{

    if (TypeProgram == FLASH_TYPEPROGRAMDATA_WORD)
    {
        /* Program word (32-bit) at a specified address.*/
        memcpy(&simulated_flash[Address], &Data, sizeof(uint32_t));
    }
    else if (TypeProgram == FLASH_TYPEPROGRAMDATA_HALFWORD)
    {
        /* Program halfword (16-bit) at a specified address.*/
        memcpy(&simulated_flash[Address], &Data, sizeof(uint16_t));
    }
    else if (TypeProgram == FLASH_TYPEPROGRAMDATA_BYTE)
    {
        /* Program byte (8-bit) at a specified address.*/
        memcpy(&simulated_flash[Address], &Data, sizeof(uint8_t));
    }
    else
    {
        return false;
    }
    return true;
}